{"version":3,"sources":["helpers/api.js","store/postsReducer.ts","store/postReducer.ts","store/index.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","url","options","fetch","then","res","ok","Error","status","json","updatePostId","id","type","initialState","posts","postId","userId","reducer","state","action","addComment","data","method","headers","body","JSON","stringify","removeComment","Promise","resolve","setTimeout","fetchPostInfo","setIsLoading","dispatch","all","post","comments","setPost","setComments","rootReducer","combineReducers","postsReducer","postReducer","getPostsSelector","getActivePostId","getActiveUserId","getPost","getComments","store","createStore","composeWithDevTools","applyMiddleware","thunk","Loader","className","PostsList","useState","isLoading","useSelector","activeUserId","activePostId","useDispatch","useEffect","fetchPosts","filtredPost","useMemo","postsCopy","length","filter","map","key","title","classNames","active","onClick","NewCommentForm","userName","email","comment","setComment","onSubmit","e","a","preventDefault","name","placeholder","value","onChange","target","PostDetails","isCommentsVisible","setIsCommentsVisible","commentId","current","item","disabled","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e64954aa.chunk.js","sourcesContent":["export const BASE_URL = \"https://mate-api.herokuapp.com/\";\n\nexport const request = (url = \"\", options) => {\n  return fetch(`${BASE_URL}${url}`, options).then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status}`);\n    }\n\n    return res.json();\n  });\n};\n\nexport const post = (url, data) => {\n  return request(url, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\n    body: JSON.stringify(data),\n  });\n};\n\nexport const patch = (url, data) => {\n  return request(url, {\n    method: \"PATCH\",\n    headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\n    body: JSON.stringify(data),\n  });\n};\n\nexport const remove = (url) => {\n  return request(url, {\n    method: \"DELETE\",\n    headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\n  });\n};\n","import { Dispatch, AnyAction } from \"redux\";\nimport { request } from \"../helpers/api\";\n\nconst SET_POSTS = \"SET_POSTS\";\nconst UPDATE_ACTIVE_POST_ID = \"UPDATE_ACTIVE_POST_ID\";\nconst UPDATE_ACTIVE_USER_ID = \"UPDATE_ACTIVE_USER_ID\";\n\nexport const setPosts = (posts: any[]) => ({ type: SET_POSTS, posts });\n\nexport const fetchPosts = (\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>\n) => (dispatch: Dispatch) => {\n  setIsLoading(true);\n  request(\"posts\").then((res) => {\n    dispatch(setPosts(res.data));\n    setIsLoading(false);\n  });\n};\n\nexport const updatePostId = (id: number) => ({\n  type: UPDATE_ACTIVE_POST_ID,\n  id,\n});\n\nexport const updateUsertId = (id: number) => ({\n  type: UPDATE_ACTIVE_USER_ID,\n  id,\n});\n\nexport type RootState = {\n  posts: any[];\n  postId: number;\n  userId: number;\n};\n\nconst initialState: RootState = {\n  posts: [],\n  postId: 0,\n  userId: 0,\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return { ...state, posts: action.posts };\n\n    case UPDATE_ACTIVE_POST_ID:\n      return { ...state, postId: action.id };\n\n    case UPDATE_ACTIVE_USER_ID:\n      return { ...state, userId: action.id };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { Dispatch, AnyAction } from \"redux\";\nimport { request, remove, post } from \"../helpers/api\";\n\nexport interface Comment {\n  id?: number;\n  postId: number;\n  body: string;\n}\n\nexport interface Post {\n  id: number;\n  userId: number;\n  title: string;\n  body: string;\n}\n\nexport type RootState = {\n  post: Post | null;\n  comments: Comment[];\n};\n\nconst SET_POST = \"SET_POST\";\nconst SET_COMMENTS = \"SET_COMMENTS\";\n\nexport const setPost = (post: Post) => ({ \n  type: SET_POST,\n  post,\n});\n\nexport const setComments = (comments: Comment[]) => ({\n  type: SET_COMMENTS,\n  comments,\n});\n\nexport const addComment = (\n  options: Comment & { name: string; email: string }\n) => post(\"comments\", options);\n\nexport const removeComment = (id: number) => {\n  return new Promise((resolve) => {\n    remove(`comments/${id}`);\n    setTimeout(() => resolve(), 1000);\n  });\n};\n\nexport const fetchPostInfo = (\n  id: number,\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>\n) => (dispatch: Dispatch) => {\n  Promise.all([request(`posts/${id}`), request(`comments/?postId=${id}`)]).then(\n    ([post, comments]) => {\n      dispatch(setPost(post.data));\n      dispatch(setComments(comments.data));\n      setIsLoading(false);\n    }\n  );\n};\n\nconst initialState: RootState = {\n  post: null,\n  comments: [],\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POST:\n      return { ...state, post: action.post };\n\n    case SET_COMMENTS:\n      return { ...state, comments: action.comments };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nimport postsReducer from \"./postsReducer\";\nimport postReducer from \"./postReducer\";\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  post: postReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const getPostsSelector = (state: RootState) => state.posts.posts;\nexport const getActivePostId = (state: RootState) => state.posts.postId;\nexport const getActiveUserId = (state: RootState) => state.posts.userId;\nexport const getPost = (state: RootState) => state.post.post;\nexport const getComments = (state: RootState) => state.post.comments;\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import React from \"react\";\nimport \"./Loader.scss\";\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./PostsList.scss\";\nimport { getPostsSelector, getActiveUserId } from \"../../store/index\";\nimport { fetchPosts } from \"../../store/postsReducer\";\nimport classNames from \"classnames\";\nimport { getActivePostId } from \"../../store\";\nimport { updatePostId } from \"../../store/postsReducer\";\nimport { Loader } from \"../Loader/Loader\";\n\ninterface Post {\n  id: number;\n  userId: number;\n  title: string;\n  body: string;\n}\n\nexport const PostsList = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const posts = useSelector(getPostsSelector);\n  const activeUserId = useSelector(getActiveUserId);\n  const activePostId = useSelector(getActivePostId);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchPosts(setIsLoading));\n  }, [dispatch]);\n\n  const onClick = (id: number) => {\n    if (activePostId === id) {\n      dispatch(updatePostId(0));\n    } else {\n      dispatch(updatePostId(id));\n    }\n  };\n\n  const filtredPost = useMemo(() => {\n    let postsCopy = [...posts];\n    if (postsCopy.length > 0 && activeUserId) {\n      postsCopy = postsCopy.filter((post) => post.userId === activeUserId);\n    }\n\n    return postsCopy;\n  }, [posts, activeUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <ul className=\"PostsList__list\">\n          {filtredPost.length > 0\n            ? filtredPost.map((post: Post) => (\n                <li className=\"PostsList__item\" key={post.id}>\n                  <div>\n                    <b>{`[User #${post.userId}]: `}</b>\n                    {post.title}\n                  </div>\n\n                  <button\n                    type=\"button\"\n                    className={classNames(\"PostsList__button button\", {\n                      active: post.id === activePostId,\n                    })}\n                    onClick={() => onClick(post.id)}\n                  >\n                    {activePostId === post.id ? \"Hide\" : \"Open\"}\n                  </button>\n                </li>\n              ))\n            : \"no posts\"}\n        </ul>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { addComment, fetchPostInfo } from \"../../store/postReducer\";\nimport { getActivePostId } from \"../../store/index\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport \"./NewCommentForm.scss\";\n\nexport const NewCommentForm: React.FC<{\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\n}> = ({ setIsLoading }) => {\n  const activePostId = useSelector(getActivePostId);\n  const [comment, setComment] = useState({\n    userName: \"\",\n    email: \"\",\n    body: \"\",\n  });\n  const { userName, email, body } = comment;\n\n  const dispatch = useDispatch();\n\n  const reset = () => {\n    setComment({ userName: \"\", email: \"\", body: \"\" });\n  };\n\n  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    if (userName && email && body) {\n      const comment = { name: userName, email, body, postId: activePostId };\n      await addComment(comment);\n      dispatch(fetchPostInfo(activePostId, setIsLoading));\n      reset();\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          value={userName}\n          className=\"NewCommentForm__input\"\n          onChange={(e) => setComment({ ...comment, userName: e.target.value })}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(e) => setComment({ ...comment, email: e.target.value })}\n          value={email}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(e) => setComment({ ...comment, body: e.target.value })}\n          value={body}\n        />\n      </div>\n\n      <button type=\"submit\" className=\"NewCommentForm__submit-button button\">\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport \"./PostDetails.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { NewCommentForm } from \"../NewCommentForm/NewCommentForm\";\nimport { getPost, getActivePostId, getComments } from \"../../store\";\nimport { fetchPostInfo, removeComment } from \"../../store/postReducer\";\nimport { Loader } from \"../Loader/Loader\";\n\ninterface Comment {\n  id?: number;\n  postId: number;\n  body: string;\n}\n\nexport const PostDetails = () => {\n  const post = useSelector(getPost);\n\n  const activePostId = useSelector(getActivePostId);\n  const comments = useSelector(getComments);\n  const dispatch = useDispatch();\n  const [isCommentsVisible, setIsCommentsVisible] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (activePostId) {\n      dispatch(fetchPostInfo(activePostId, setIsLoading));\n    }\n  }, [activePostId, dispatch]);\n\n  const onClick = async (commentId: number, postId: number) => {\n    setIsLoading(true);\n    await removeComment(commentId);\n    dispatch(fetchPostInfo(postId, setIsLoading));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          {activePostId && post ? (\n            <>\n              <h2>Post details:</h2>\n\n              <section className=\"PostDetails__post\">\n                <p>{post.title}</p>\n              </section>\n\n              <section className=\"PostDetails__comments\">\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => setIsCommentsVisible((current) => !current)}\n                >\n                  {isCommentsVisible ? \"Hide comments\" : \"Show comments\"}\n                </button>\n                {isCommentsVisible && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.length > 0\n                      ? comments.map((item: Comment) => (\n                          <li className=\"PostDetails__list-item\" key={item.id}>\n                            <button\n                              type=\"button\"\n                              className=\"PostDetails__remove-button button\"\n                              onClick={() => onClick(item.id!, activePostId)}\n                              disabled={isLoading}\n                            >\n                              X\n                            </button>\n                            <p>{item.body}</p>\n                          </li>\n                        ))\n                      : \"No comments\"}\n                  </ul>\n                )}\n              </section>\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm setIsLoading={setIsLoading} />\n                </div>\n              </section>\n            </>\n          ) : (\n            <span className=\"select-post\">Select post</span>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { PostsList } from \"./components/PostsList/PostsList\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getActiveUserId } from \"./store\";\nimport { updateUsertId } from \"./store/postsReducer\";\nimport { PostDetails } from \"./components/PostDetails/PostDetails\";\n\nimport \"./App.scss\";\n\nconst options = [\n  { value: 0, name: \"All users\" },\n  { value: 1, name: \"Leanne Graham\" },\n  { value: 2, name: \"Ervin Howell\" },\n  { value: 3, name: \"Clementine Bauch\" },\n  { value: 4, name: \"Patricia Lebsack\" },\n  { value: 5, name: \"Chelsey Dietrich\" },\n  { value: 6, name: \"Mrs. Dennis Schulist\" },\n  { value: 7, name: \"Kurtis Weissnat\" },\n  { value: 8, name: \"Nicholas Runolfsdottir V\" },\n  { value: 9, name: \"Glenna Reichert\" },\n  { value: 10, name: \"Leanne Graham\" },\n];\n\nconst App = () => {\n  const activeUserId = useSelector(getActiveUserId);\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            value={activeUserId}\n            onChange={(e) => dispatch(updateUsertId(+e.target.value))}\n          >\n            {options.map(({ value, name }) => (\n              <option value={value} key={value}>\n                {name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport store from \"./store\";\n\nconst Root = () => (\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n"],"sourceRoot":""}